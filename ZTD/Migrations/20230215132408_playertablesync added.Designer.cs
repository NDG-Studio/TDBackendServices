// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZTD;

#nullable disable

namespace ZTD.Migrations
{
    [DbContext(typeof(ZTDContext))]
    [Migration("20230215132408_playertablesync added")]
    partial class playertablesyncadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedLibrary.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AppVersion")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("InnerException")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsVersion")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("SharedLibrary.Entities.LogAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AppVersion")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsVersion")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LogAction");
                });

            modelBuilder.Entity("ZTD.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SceneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalStar")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("ZTD.Entities.Chest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChestTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InstantOpenGemCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MainItemMaxCount")
                        .HasColumnType("integer");

                    b.Property<int>("MainItemMinCount")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("OpenDuration")
                        .HasColumnType("interval");

                    b.Property<int>("OtherItemMaxCount")
                        .HasColumnType("integer");

                    b.Property<int>("OtherItemMimCount")
                        .HasColumnType("integer");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChestTypeId");

                    b.ToTable("Chest");
                });

            modelBuilder.Entity("ZTD.Entities.ChestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MainItemType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChestType");
                });

            modelBuilder.Entity("ZTD.Entities.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Enemy");
                });

            modelBuilder.Entity("ZTD.Entities.EnemyKill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DeadCount")
                        .HasColumnType("integer");

                    b.Property<int>("EnemyLevelId")
                        .HasColumnType("integer");

                    b.Property<long>("UserProgressHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EnemyLevelId");

                    b.HasIndex("UserProgressHistoryId");

                    b.ToTable("EnemyKill");
                });

            modelBuilder.Entity("ZTD.Entities.EnemyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Armor")
                        .HasColumnType("double precision");

                    b.Property<int>("BarierDamageAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Coin")
                        .HasColumnType("integer");

                    b.Property<int>("EnemyId")
                        .HasColumnType("integer");

                    b.Property<double>("Health")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.ToTable("EnemyLevel");
                });

            modelBuilder.Entity("ZTD.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Value1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("ZTD.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BarrierHealth")
                        .HasColumnType("integer");

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<int>("Coin")
                        .HasColumnType("integer");

                    b.Property<int>("LevelStarCondition")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("ZTD.Entities.LevelChestChance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChanceMultiplier")
                        .HasColumnType("integer");

                    b.Property<int>("ChestId")
                        .HasColumnType("integer");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChestId");

                    b.HasIndex("LevelId");

                    b.ToTable("LevelChestChance");
                });

            modelBuilder.Entity("ZTD.Entities.LevelGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("LevelId");

                    b.ToTable("LevelGift");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerChest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChestId")
                        .HasColumnType("integer");

                    b.Property<string>("GainedItems")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("OpenFinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("OpenStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SlotPlace")
                        .HasColumnType("integer");

                    b.Property<int>("UsedGem")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChestId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerChest");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerItem");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerResearchNodeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ResearchNodeLevelId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ResearchNodeLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerResearchNodeLevel");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerTableSync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("LastSyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TableChangesId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TableChangesId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerTableSync");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GemCount")
                        .HasColumnType("integer");

                    b.Property<int>("ResearchPoint")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerVariable");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ResearchNode");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNodeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BluePrintCount")
                        .HasColumnType("integer");

                    b.Property<string>("BuffValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ResearchNodeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ResearchNodeId");

                    b.ToTable("ResearchNodeLevel");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNodeUpgradeCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PrereqLevel")
                        .HasColumnType("integer");

                    b.Property<int>("PrereqResearchNodeId")
                        .HasColumnType("integer");

                    b.Property<int>("ResearchNodeLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrereqResearchNodeId");

                    b.HasIndex("ResearchNodeLevelId");

                    b.ToTable("ResearchNodeUpgradeCondition");
                });

            modelBuilder.Entity("ZTD.Entities.TableChanges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TableEnum")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TableChanges");
                });

            modelBuilder.Entity("ZTD.Entities.Tower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tower");
                });

            modelBuilder.Entity("ZTD.Entities.TowerLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Damage")
                        .HasColumnType("double precision");

                    b.Property<double>("FireRate")
                        .HasColumnType("double precision");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<int>("TowerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TowerId");

                    b.ToTable("TowerLevel");
                });

            modelBuilder.Entity("ZTD.Entities.TowerProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("TowerArmorDamage")
                        .HasColumnType("double precision");

                    b.Property<int>("TowerCount")
                        .HasColumnType("integer");

                    b.Property<double>("TowerDamage")
                        .HasColumnType("double precision");

                    b.Property<double>("TowerDotDamage")
                        .HasColumnType("double precision");

                    b.Property<int>("TowerFireCount")
                        .HasColumnType("integer");

                    b.Property<int>("TowerId")
                        .HasColumnType("integer");

                    b.Property<int>("TowerUpgradeNumber")
                        .HasColumnType("integer");

                    b.Property<long>("UserProgressHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TowerId");

                    b.HasIndex("UserProgressHistoryId");

                    b.ToTable("TowerProgress");
                });

            modelBuilder.Entity("ZTD.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AppleId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FacebookId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("FirstLogInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GooglePlayId")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAndroid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApe")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTutorialDone")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileUserId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TdSyncDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "ugurcan.bagriyanik@ndgstudio.com.tr",
                            FirstLogInDate = new DateTimeOffset(new DateTime(2023, 2, 15, 16, 24, 8, 611, DateTimeKind.Unspecified).AddTicks(3970), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsAndroid = true,
                            IsApe = true,
                            IsTutorialDone = false,
                            LastSeen = new DateTimeOffset(new DateTime(2023, 2, 15, 16, 24, 8, 611, DateTimeKind.Unspecified).AddTicks(4020), new TimeSpan(0, 3, 0, 0, 0)),
                            MobileUserId = "dummyMobileUserId1",
                            PasswordHash = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Username = "ugur"
                        });
                });

            modelBuilder.Entity("ZTD.Entities.UserProgressHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BarrierHealth")
                        .HasColumnType("integer");

                    b.Property<int>("GainedCoin")
                        .HasColumnType("integer");

                    b.Property<int>("GainedStar")
                        .HasColumnType("integer");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("SpentCoin")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCoin")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("WaveEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("WaveStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgressHistory");
                });

            modelBuilder.Entity("ZTD.Entities.UserTdStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BuildedTowerCount")
                        .HasColumnType("bigint");

                    b.Property<int>("GemCount")
                        .HasColumnType("integer");

                    b.Property<long>("KilledEnemyCount")
                        .HasColumnType("bigint");

                    b.Property<long>("RemovedTowerCount")
                        .HasColumnType("bigint");

                    b.Property<int>("ResearchPoint")
                        .HasColumnType("integer");

                    b.Property<int>("TdLevelId")
                        .HasColumnType("integer");

                    b.Property<long>("TotalGainedGemCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalGainedResearchPoint")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalGainedScrapCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UpgradedTowerCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TdLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTdStatus");
                });

            modelBuilder.Entity("ZTD.Entities.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("ZTD.Entities.UserTowerPlaceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("TowerLevelId")
                        .HasColumnType("integer");

                    b.Property<long>("UserProgressHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TowerLevelId");

                    b.HasIndex("UserProgressHistoryId");

                    b.ToTable("UserTowerPlaceHistory");
                });

            modelBuilder.Entity("ZTD.Entities.Wave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("EntryInterval")
                        .HasColumnType("double precision");

                    b.Property<int>("EntryPoint")
                        .HasColumnType("integer");

                    b.Property<double>("EntryTime")
                        .HasColumnType("double precision");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Wave");
                });

            modelBuilder.Entity("ZTD.Entities.WavePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("EnemyLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("WaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WaveId");

                    b.ToTable("WavePart");
                });

            modelBuilder.Entity("ZTD.Entities.Chest", b =>
                {
                    b.HasOne("ZTD.Entities.ChestType", "ChestType")
                        .WithMany("Chests")
                        .HasForeignKey("ChestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChestType");
                });

            modelBuilder.Entity("ZTD.Entities.EnemyKill", b =>
                {
                    b.HasOne("ZTD.Entities.EnemyLevel", "EnemyLevel")
                        .WithMany()
                        .HasForeignKey("EnemyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.UserProgressHistory", "UserProgressHistory")
                        .WithMany()
                        .HasForeignKey("UserProgressHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnemyLevel");

                    b.Navigation("UserProgressHistory");
                });

            modelBuilder.Entity("ZTD.Entities.EnemyLevel", b =>
                {
                    b.HasOne("ZTD.Entities.Enemy", "Enemy")
                        .WithMany("EnemyLevels")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("ZTD.Entities.Level", b =>
                {
                    b.HasOne("ZTD.Entities.Chapter", "Chapter")
                        .WithMany("Levels")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ZTD.Entities.LevelChestChance", b =>
                {
                    b.HasOne("ZTD.Entities.Chest", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.Level", "Level")
                        .WithMany("LevelChestChances")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chest");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("ZTD.Entities.LevelGift", b =>
                {
                    b.HasOne("ZTD.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.Level", "Level")
                        .WithMany("LevelGifts")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerChest", b =>
                {
                    b.HasOne("ZTD.Entities.Chest", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerItem", b =>
                {
                    b.HasOne("ZTD.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerResearchNodeLevel", b =>
                {
                    b.HasOne("ZTD.Entities.ResearchNodeLevel", "ResearchNodeLevel")
                        .WithMany()
                        .HasForeignKey("ResearchNodeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchNodeLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerTableSync", b =>
                {
                    b.HasOne("ZTD.Entities.TableChanges", "TableChanges")
                        .WithMany()
                        .HasForeignKey("TableChangesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableChanges");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.PlayerVariable", b =>
                {
                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNodeLevel", b =>
                {
                    b.HasOne("ZTD.Entities.ResearchNode", "ResearchNode")
                        .WithMany("ResearchNodeLevels")
                        .HasForeignKey("ResearchNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchNode");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNodeUpgradeCondition", b =>
                {
                    b.HasOne("ZTD.Entities.ResearchNode", "PrereqResearchNode")
                        .WithMany()
                        .HasForeignKey("PrereqResearchNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.ResearchNodeLevel", "ResearchNodeLevel")
                        .WithMany("Conditions")
                        .HasForeignKey("ResearchNodeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrereqResearchNode");

                    b.Navigation("ResearchNodeLevel");
                });

            modelBuilder.Entity("ZTD.Entities.TowerLevel", b =>
                {
                    b.HasOne("ZTD.Entities.Tower", "Tower")
                        .WithMany("TowerLevels")
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");
                });

            modelBuilder.Entity("ZTD.Entities.TowerProgress", b =>
                {
                    b.HasOne("ZTD.Entities.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.UserProgressHistory", "UserProgressHistory")
                        .WithMany()
                        .HasForeignKey("UserProgressHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");

                    b.Navigation("UserProgressHistory");
                });

            modelBuilder.Entity("ZTD.Entities.UserProgressHistory", b =>
                {
                    b.HasOne("ZTD.Entities.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.UserTdStatus", b =>
                {
                    b.HasOne("ZTD.Entities.Level", "Level")
                        .WithMany()
                        .HasForeignKey("TdLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.UserToken", b =>
                {
                    b.HasOne("ZTD.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZTD.Entities.UserTowerPlaceHistory", b =>
                {
                    b.HasOne("ZTD.Entities.TowerLevel", "TowerLevel")
                        .WithMany()
                        .HasForeignKey("TowerLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZTD.Entities.UserProgressHistory", "UserProgressHistory")
                        .WithMany()
                        .HasForeignKey("UserProgressHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TowerLevel");

                    b.Navigation("UserProgressHistory");
                });

            modelBuilder.Entity("ZTD.Entities.Wave", b =>
                {
                    b.HasOne("ZTD.Entities.Level", "Level")
                        .WithMany("Waves")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("ZTD.Entities.WavePart", b =>
                {
                    b.HasOne("ZTD.Entities.Wave", "Wave")
                        .WithMany("WaveParts")
                        .HasForeignKey("WaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wave");
                });

            modelBuilder.Entity("ZTD.Entities.Chapter", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("ZTD.Entities.ChestType", b =>
                {
                    b.Navigation("Chests");
                });

            modelBuilder.Entity("ZTD.Entities.Enemy", b =>
                {
                    b.Navigation("EnemyLevels");
                });

            modelBuilder.Entity("ZTD.Entities.Level", b =>
                {
                    b.Navigation("LevelChestChances");

                    b.Navigation("LevelGifts");

                    b.Navigation("Waves");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNode", b =>
                {
                    b.Navigation("ResearchNodeLevels");
                });

            modelBuilder.Entity("ZTD.Entities.ResearchNodeLevel", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("ZTD.Entities.Tower", b =>
                {
                    b.Navigation("TowerLevels");
                });

            modelBuilder.Entity("ZTD.Entities.Wave", b =>
                {
                    b.Navigation("WaveParts");
                });
#pragma warning restore 612, 618
        }
    }
}
