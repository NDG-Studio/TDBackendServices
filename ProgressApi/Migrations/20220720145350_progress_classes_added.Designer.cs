// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProgressApi;

#nullable disable

namespace ProgressApi.Migrations
{
    [DbContext(typeof(ProgressContext))]
    [Migration("20220720145350_progress_classes_added")]
    partial class progress_classes_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProgressApi.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("ProgressApi.Entities.Tower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tower");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Name = "StandartTower"
                        },
                        new
                        {
                            Id = 2L,
                            IsActive = true,
                            Name = "ShortRangeAOETower"
                        },
                        new
                        {
                            Id = 3L,
                            IsActive = true,
                            Name = "MeleeTower"
                        },
                        new
                        {
                            Id = 4L,
                            IsActive = true,
                            Name = "SlowTower"
                        },
                        new
                        {
                            Id = 5L,
                            IsActive = true,
                            Name = "SniperTower"
                        },
                        new
                        {
                            Id = 6L,
                            IsActive = true,
                            Name = "LongRangeAOETower"
                        },
                        new
                        {
                            Id = 7L,
                            IsActive = true,
                            Name = "ShortRangeAOEStackingDamageTower"
                        },
                        new
                        {
                            Id = 8L,
                            IsActive = true,
                            Name = "PiercingMediumRangeTower"
                        },
                        new
                        {
                            Id = 9L,
                            IsActive = true,
                            Name = "CommandTower"
                        });
                });

            modelBuilder.Entity("ProgressApi.Entities.TowerProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("TowerArmorDamage")
                        .HasColumnType("double precision");

                    b.Property<int>("TowerCount")
                        .HasColumnType("integer");

                    b.Property<double>("TowerDamage")
                        .HasColumnType("double precision");

                    b.Property<double>("TowerDotDamage")
                        .HasColumnType("double precision");

                    b.Property<int>("TowerFireCount")
                        .HasColumnType("integer");

                    b.Property<long>("TowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TowerName")
                        .HasColumnType("bigint");

                    b.Property<int>("TowerUpgradeNumber")
                        .HasColumnType("integer");

                    b.Property<long>("UserProgressId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TowerId");

                    b.HasIndex("UserProgressId");

                    b.ToTable("TowerProgress");
                });

            modelBuilder.Entity("ProgressApi.Entities.UserProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BarrierHealth")
                        .HasColumnType("double precision");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LevelStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<double>("ScrapValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.Property<int>("StarCount")
                        .HasColumnType("integer");

                    b.Property<double>("Time")
                        .HasColumnType("double precision");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("ProgressApi.Entities.Zombie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Zombie");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            Name = "z1"
                        },
                        new
                        {
                            Id = 2L,
                            IsActive = true,
                            Name = "z2"
                        },
                        new
                        {
                            Id = 3L,
                            IsActive = true,
                            Name = "z3"
                        },
                        new
                        {
                            Id = 4L,
                            IsActive = true,
                            Name = "z4"
                        },
                        new
                        {
                            Id = 5L,
                            IsActive = true,
                            Name = "z5"
                        },
                        new
                        {
                            Id = 6L,
                            IsActive = true,
                            Name = "z6"
                        },
                        new
                        {
                            Id = 7L,
                            IsActive = true,
                            Name = "z7"
                        },
                        new
                        {
                            Id = 8L,
                            IsActive = true,
                            Name = "z8"
                        },
                        new
                        {
                            Id = 9L,
                            IsActive = true,
                            Name = "z9"
                        });
                });

            modelBuilder.Entity("ProgressApi.Entities.ZombieKill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DeadCount")
                        .HasColumnType("bigint");

                    b.Property<long>("UserProgressId")
                        .HasColumnType("bigint");

                    b.Property<long>("ZombieId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserProgressId");

                    b.HasIndex("ZombieId");

                    b.ToTable("ZombieKill");
                });

            modelBuilder.Entity("SharedLibrary.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AppVersion")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("InnerException")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsVersion")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("SharedLibrary.Entities.LogAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AppVersion")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("EventId")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsVersion")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LogAction");
                });

            modelBuilder.Entity("ProgressApi.Entities.TowerProgress", b =>
                {
                    b.HasOne("ProgressApi.Entities.Tower", "Tower")
                        .WithMany()
                        .HasForeignKey("TowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgressApi.Entities.UserProgress", "UserProgress")
                        .WithMany()
                        .HasForeignKey("UserProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tower");

                    b.Navigation("UserProgress");
                });

            modelBuilder.Entity("ProgressApi.Entities.UserProgress", b =>
                {
                    b.HasOne("ProgressApi.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProgressApi.Entities.ZombieKill", b =>
                {
                    b.HasOne("ProgressApi.Entities.UserProgress", "UserProgress")
                        .WithMany()
                        .HasForeignKey("UserProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgressApi.Entities.Zombie", "Zombie")
                        .WithMany()
                        .HasForeignKey("ZombieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProgress");

                    b.Navigation("Zombie");
                });
#pragma warning restore 612, 618
        }
    }
}
